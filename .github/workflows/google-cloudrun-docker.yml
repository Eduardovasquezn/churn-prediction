# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#     Secrets Manager     https://console.cloud.google.com/apis/api/secretmanager.googleapis.com/metrics?project=churn-prediction-421019
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# 6. Create Artifact Registry repository (same name as SERVICE)
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build and Deploy to Cloud Run

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: '${{ vars.PROJECT_ID }}'
  GAR_LOCATION: '${{ vars.GAR_LOCATION }}'
  SERVICE: '${{ vars.SERVICE }}'
  REGION: '${{ vars.REGION }}'
  IMAGE_NAME: '${{ vars.IMAGE_NAME }}'
  COMET_ML_WORKSPACE: '${{ vars.COMET_ML_WORKSPACE }}'
  COMET_ML_MODEL_NAME: '${{ vars.COMET_ML_MODEL_NAME }}'
  COMET_ML_PROJECT_NAME: '${{ vars.COMET_ML_PROJECT_NAME }}'

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # NOTE: Alternative option - authentication via credentials json
      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}''

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
#      - name: Docker Auth
#        id: docker-auth
#        uses: 'docker/login-action@v1'
#        with:
#          username: 'oauth2accesstoken'
#          password: '${{ steps.auth.outputs.access_token }}'
#          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Push Container
        run: |-
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"

      # END - Docker auth and build

#      - name: Deploy to Cloud Run
#        id: deploy
#        uses: google-github-actions/deploy-cloudrun@v2
#        with:
#          service: ${{ env.SERVICE }}
#          region: ${{ env.REGION }}
##          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
#          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
#          env_vars: |-
#            COMET_ML_WORKSPACE=${{ env.COMET_ML_WORKSPACE }}
#            COMET_ML_MODEL_NAME=${{ env.COMET_ML_MODEL_NAME }}
#            COMET_ML_PROJECT_NAME=${{ env.COMET_ML_PROJECT_NAME }}
#          secrets: |-
#            COMET_ML_API_KEY=${{ secrets.COMET_ML_API_KEY }}:1
      - name: Deploy to Cloud Run
        run: |-
          gcloud run deploy ${{ env.SERVICE }} \
            --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --service-account=cloud-run@churn-prediction-421019.iam.gserviceaccount.com \
            --region ${{ env.REGION }} \
            --platform managed \
            --set-env-vars=COMET_ML_WORKSPACE=${{ env.COMET_ML_WORKSPACE }} \
            --set-env-vars=COMET_ML_MODEL_NAME=${{ env.COMET_ML_MODEL_NAME }} \
            --set-env-vars=COMET_ML_PROJECT_NAME=${{ env.COMET_ML_PROJECT_NAME }} \
            --set-secrets=COMET_ML_API_KEY=${{ secrets.COMET_ML_API_KEY }}:1\
            --allow-unauthenticated  # Adjust flags as per your requirements
      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
